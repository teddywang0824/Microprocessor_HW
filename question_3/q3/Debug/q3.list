
q3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003d8  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000508  08000510  00001510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000508  08000508  00001510  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000508  08000508  00001510  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000508  08000510  00001510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000508  08000508  00001508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800050c  0800050c  0000150c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000510  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000510  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001510  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009c6  00000000  00000000  00001539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000034a  00000000  00000000  00001eff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000f8  00000000  00000000  00002250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000a8  00000000  00000000  00002348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008867  00000000  00000000  000023f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001227  00000000  00000000  0000ac57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00032c19  00000000  00000000  0000be7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0003ea97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000270  00000000  00000000  0003eadc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0003ed4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080004f0 	.word	0x080004f0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080004f0 	.word	0x080004f0

08000170 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000174:	4b15      	ldr	r3, [pc, #84]	@ (80001cc <SystemInit+0x5c>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a14      	ldr	r2, [pc, #80]	@ (80001cc <SystemInit+0x5c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000180:	4b12      	ldr	r3, [pc, #72]	@ (80001cc <SystemInit+0x5c>)
 8000182:	685a      	ldr	r2, [r3, #4]
 8000184:	4911      	ldr	r1, [pc, #68]	@ (80001cc <SystemInit+0x5c>)
 8000186:	4b12      	ldr	r3, [pc, #72]	@ (80001d0 <SystemInit+0x60>)
 8000188:	4013      	ands	r3, r2
 800018a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800018c:	4b0f      	ldr	r3, [pc, #60]	@ (80001cc <SystemInit+0x5c>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a0e      	ldr	r2, [pc, #56]	@ (80001cc <SystemInit+0x5c>)
 8000192:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8000196:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800019a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800019c:	4b0b      	ldr	r3, [pc, #44]	@ (80001cc <SystemInit+0x5c>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	4a0a      	ldr	r2, [pc, #40]	@ (80001cc <SystemInit+0x5c>)
 80001a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80001a6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80001a8:	4b08      	ldr	r3, [pc, #32]	@ (80001cc <SystemInit+0x5c>)
 80001aa:	685b      	ldr	r3, [r3, #4]
 80001ac:	4a07      	ldr	r2, [pc, #28]	@ (80001cc <SystemInit+0x5c>)
 80001ae:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 80001b2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80001b4:	4b05      	ldr	r3, [pc, #20]	@ (80001cc <SystemInit+0x5c>)
 80001b6:	f44f 021f 	mov.w	r2, #10420224	@ 0x9f0000
 80001ba:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80001bc:	f000 f80c 	bl	80001d8 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80001c0:	4b04      	ldr	r3, [pc, #16]	@ (80001d4 <SystemInit+0x64>)
 80001c2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80001c6:	609a      	str	r2, [r3, #8]
#endif 
}
 80001c8:	bf00      	nop
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	40021000 	.word	0x40021000
 80001d0:	f8ff0000 	.word	0xf8ff0000
 80001d4:	e000ed00 	.word	0xe000ed00

080001d8 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80001dc:	f000 f802 	bl	80001e4 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80001e0:	bf00      	nop
 80001e2:	bd80      	pop	{r7, pc}

080001e4 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80001ea:	2300      	movs	r3, #0
 80001ec:	607b      	str	r3, [r7, #4]
 80001ee:	2300      	movs	r3, #0
 80001f0:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80001f2:	4b3a      	ldr	r3, [pc, #232]	@ (80002dc <SetSysClockTo72+0xf8>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a39      	ldr	r2, [pc, #228]	@ (80002dc <SetSysClockTo72+0xf8>)
 80001f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80001fc:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80001fe:	4b37      	ldr	r3, [pc, #220]	@ (80002dc <SetSysClockTo72+0xf8>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000206:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	3301      	adds	r3, #1
 800020c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d103      	bne.n	800021c <SetSysClockTo72+0x38>
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800021a:	d1f0      	bne.n	80001fe <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800021c:	4b2f      	ldr	r3, [pc, #188]	@ (80002dc <SetSysClockTo72+0xf8>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000224:	2b00      	cmp	r3, #0
 8000226:	d002      	beq.n	800022e <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000228:	2301      	movs	r3, #1
 800022a:	603b      	str	r3, [r7, #0]
 800022c:	e001      	b.n	8000232 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800022e:	2300      	movs	r3, #0
 8000230:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	2b01      	cmp	r3, #1
 8000236:	d14b      	bne.n	80002d0 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000238:	4b29      	ldr	r3, [pc, #164]	@ (80002e0 <SetSysClockTo72+0xfc>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a28      	ldr	r2, [pc, #160]	@ (80002e0 <SetSysClockTo72+0xfc>)
 800023e:	f043 0310 	orr.w	r3, r3, #16
 8000242:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000244:	4b26      	ldr	r3, [pc, #152]	@ (80002e0 <SetSysClockTo72+0xfc>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a25      	ldr	r2, [pc, #148]	@ (80002e0 <SetSysClockTo72+0xfc>)
 800024a:	f023 0307 	bic.w	r3, r3, #7
 800024e:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000250:	4b23      	ldr	r3, [pc, #140]	@ (80002e0 <SetSysClockTo72+0xfc>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a22      	ldr	r2, [pc, #136]	@ (80002e0 <SetSysClockTo72+0xfc>)
 8000256:	f043 0302 	orr.w	r3, r3, #2
 800025a:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800025c:	4b1f      	ldr	r3, [pc, #124]	@ (80002dc <SetSysClockTo72+0xf8>)
 800025e:	4a1f      	ldr	r2, [pc, #124]	@ (80002dc <SetSysClockTo72+0xf8>)
 8000260:	685b      	ldr	r3, [r3, #4]
 8000262:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000264:	4b1d      	ldr	r3, [pc, #116]	@ (80002dc <SetSysClockTo72+0xf8>)
 8000266:	4a1d      	ldr	r2, [pc, #116]	@ (80002dc <SetSysClockTo72+0xf8>)
 8000268:	685b      	ldr	r3, [r3, #4]
 800026a:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800026c:	4b1b      	ldr	r3, [pc, #108]	@ (80002dc <SetSysClockTo72+0xf8>)
 800026e:	685b      	ldr	r3, [r3, #4]
 8000270:	4a1a      	ldr	r2, [pc, #104]	@ (80002dc <SetSysClockTo72+0xf8>)
 8000272:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000276:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000278:	4b18      	ldr	r3, [pc, #96]	@ (80002dc <SetSysClockTo72+0xf8>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	4a17      	ldr	r2, [pc, #92]	@ (80002dc <SetSysClockTo72+0xf8>)
 800027e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8000282:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000284:	4b15      	ldr	r3, [pc, #84]	@ (80002dc <SetSysClockTo72+0xf8>)
 8000286:	685b      	ldr	r3, [r3, #4]
 8000288:	4a14      	ldr	r2, [pc, #80]	@ (80002dc <SetSysClockTo72+0xf8>)
 800028a:	f443 13e8 	orr.w	r3, r3, #1900544	@ 0x1d0000
 800028e:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000290:	4b12      	ldr	r3, [pc, #72]	@ (80002dc <SetSysClockTo72+0xf8>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a11      	ldr	r2, [pc, #68]	@ (80002dc <SetSysClockTo72+0xf8>)
 8000296:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800029a:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800029c:	bf00      	nop
 800029e:	4b0f      	ldr	r3, [pc, #60]	@ (80002dc <SetSysClockTo72+0xf8>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d0f9      	beq.n	800029e <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80002aa:	4b0c      	ldr	r3, [pc, #48]	@ (80002dc <SetSysClockTo72+0xf8>)
 80002ac:	685b      	ldr	r3, [r3, #4]
 80002ae:	4a0b      	ldr	r2, [pc, #44]	@ (80002dc <SetSysClockTo72+0xf8>)
 80002b0:	f023 0303 	bic.w	r3, r3, #3
 80002b4:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80002b6:	4b09      	ldr	r3, [pc, #36]	@ (80002dc <SetSysClockTo72+0xf8>)
 80002b8:	685b      	ldr	r3, [r3, #4]
 80002ba:	4a08      	ldr	r2, [pc, #32]	@ (80002dc <SetSysClockTo72+0xf8>)
 80002bc:	f043 0302 	orr.w	r3, r3, #2
 80002c0:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80002c2:	bf00      	nop
 80002c4:	4b05      	ldr	r3, [pc, #20]	@ (80002dc <SetSysClockTo72+0xf8>)
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	f003 030c 	and.w	r3, r3, #12
 80002cc:	2b08      	cmp	r3, #8
 80002ce:	d1f9      	bne.n	80002c4 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80002d0:	bf00      	nop
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bc80      	pop	{r7}
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	40021000 	.word	0x40021000
 80002e0:	40022000 	.word	0x40022000

080002e4 <generate_wave>:
#include <stm32f10x.h>

// 3.1 Generate a square wave with a period 20ms.
void generate_wave() {
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
	RCC->APB2ENR = 0xFC;
 80002e8:	4b17      	ldr	r3, [pc, #92]	@ (8000348 <generate_wave+0x64>)
 80002ea:	22fc      	movs	r2, #252	@ 0xfc
 80002ec:	619a      	str	r2, [r3, #24]
	RCC->APB1ENR = (1<<0);
 80002ee:	4b16      	ldr	r3, [pc, #88]	@ (8000348 <generate_wave+0x64>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	61da      	str	r2, [r3, #28]
	GPIOA->CRL |= 0xB;
 80002f4:	4b15      	ldr	r3, [pc, #84]	@ (800034c <generate_wave+0x68>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a14      	ldr	r2, [pc, #80]	@ (800034c <generate_wave+0x68>)
 80002fa:	f043 030b 	orr.w	r3, r3, #11
 80002fe:	6013      	str	r3, [r2, #0]
	TIM2->CCER = 0x1;
 8000300:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000304:	2201      	movs	r2, #1
 8000306:	841a      	strh	r2, [r3, #32]
	TIM2->CCMR1 |= 0x60;
 8000308:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800030c:	8b1b      	ldrh	r3, [r3, #24]
 800030e:	b29b      	uxth	r3, r3
 8000310:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000314:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000318:	b29b      	uxth	r3, r3
 800031a:	8313      	strh	r3, [r2, #24]
	TIM2->PSC = 72 - 1;
 800031c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000320:	2247      	movs	r2, #71	@ 0x47
 8000322:	851a      	strh	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 20000 - 1;
 8000324:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000328:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800032c:	859a      	strh	r2, [r3, #44]	@ 0x2c
	TIM2->CCR1 = 500;
 800032e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000332:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000336:	869a      	strh	r2, [r3, #52]	@ 0x34
	TIM2->CR1 = 1;
 8000338:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800033c:	2201      	movs	r2, #1
 800033e:	801a      	strh	r2, [r3, #0]
}
 8000340:	bf00      	nop
 8000342:	46bd      	mov	sp, r7
 8000344:	bc80      	pop	{r7}
 8000346:	4770      	bx	lr
 8000348:	40021000 	.word	0x40021000
 800034c:	40010800 	.word	0x40010800

08000350 <Servo_SetAngle>:

// 3.2
void Servo_SetAngle(uint8_t angle) {
 8000350:	b480      	push	{r7}
 8000352:	b085      	sub	sp, #20
 8000354:	af00      	add	r7, sp, #0
 8000356:	4603      	mov	r3, r0
 8000358:	71fb      	strb	r3, [r7, #7]
	uint16_t pulse;
	if(angle == 0) {
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d103      	bne.n	8000368 <Servo_SetAngle+0x18>
		pulse = 1000;
 8000360:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000364:	81fb      	strh	r3, [r7, #14]
 8000366:	e009      	b.n	800037c <Servo_SetAngle+0x2c>
	} else if (angle == 90) {
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	2b5a      	cmp	r3, #90	@ 0x5a
 800036c:	d103      	bne.n	8000376 <Servo_SetAngle+0x26>
		pulse = 1500;
 800036e:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000372:	81fb      	strh	r3, [r7, #14]
 8000374:	e002      	b.n	800037c <Servo_SetAngle+0x2c>
	} else {
		pulse = 2000;
 8000376:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800037a:	81fb      	strh	r3, [r7, #14]
	}
    TIM2->CCR1 = pulse;
 800037c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000380:	89fb      	ldrh	r3, [r7, #14]
 8000382:	8693      	strh	r3, [r2, #52]	@ 0x34
}
 8000384:	bf00      	nop
 8000386:	3714      	adds	r7, #20
 8000388:	46bd      	mov	sp, r7
 800038a:	bc80      	pop	{r7}
 800038c:	4770      	bx	lr

0800038e <delay_ms>:

void delay_ms(int us) {
 800038e:	b480      	push	{r7}
 8000390:	b085      	sub	sp, #20
 8000392:	af00      	add	r7, sp, #0
 8000394:	6078      	str	r0, [r7, #4]
	int temp = us * 9000;
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	f242 3228 	movw	r2, #9000	@ 0x2328
 800039c:	fb02 f303 	mul.w	r3, r2, r3
 80003a0:	60bb      	str	r3, [r7, #8]
	for(int i = temp;i>=0;i--);
 80003a2:	68bb      	ldr	r3, [r7, #8]
 80003a4:	60fb      	str	r3, [r7, #12]
 80003a6:	e002      	b.n	80003ae <delay_ms+0x20>
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	3b01      	subs	r3, #1
 80003ac:	60fb      	str	r3, [r7, #12]
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	daf9      	bge.n	80003a8 <delay_ms+0x1a>
}
 80003b4:	bf00      	nop
 80003b6:	bf00      	nop
 80003b8:	3714      	adds	r7, #20
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr

080003c0 <main>:

int main(void) {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0

    generate_wave();
 80003c4:	f7ff ff8e 	bl	80002e4 <generate_wave>

    while (1) {

    	// 3.2
    	Servo_SetAngle(0);    // 最左，順時針
 80003c8:	2000      	movs	r0, #0
 80003ca:	f7ff ffc1 	bl	8000350 <Servo_SetAngle>
		delay_ms(10000);  // 延遲等待伺服轉動
 80003ce:	f242 7010 	movw	r0, #10000	@ 0x2710
 80003d2:	f7ff ffdc 	bl	800038e <delay_ms>

		Servo_SetAngle(180);  // 最右，逆時針
 80003d6:	20b4      	movs	r0, #180	@ 0xb4
 80003d8:	f7ff ffba 	bl	8000350 <Servo_SetAngle>
		delay_ms(10000);  // 延遲等待
 80003dc:	f242 7010 	movw	r0, #10000	@ 0x2710
 80003e0:	f7ff ffd5 	bl	800038e <delay_ms>

		Servo_SetAngle(90);   // 回中間
 80003e4:	205a      	movs	r0, #90	@ 0x5a
 80003e6:	f7ff ffb3 	bl	8000350 <Servo_SetAngle>
		delay_ms(10000);
 80003ea:	f242 7010 	movw	r0, #10000	@ 0x2710
 80003ee:	f7ff ffce 	bl	800038e <delay_ms>
    	Servo_SetAngle(0);    // 最左，順時針
 80003f2:	bf00      	nop
 80003f4:	e7e8      	b.n	80003c8 <main+0x8>

080003f6 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80003f6:	b480      	push	{r7}
 80003f8:	af00      	add	r7, sp, #0
}
 80003fa:	bf00      	nop
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bc80      	pop	{r7}
 8000400:	4770      	bx	lr

08000402 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000402:	b480      	push	{r7}
 8000404:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000406:	bf00      	nop
 8000408:	e7fd      	b.n	8000406 <HardFault_Handler+0x4>

0800040a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800040a:	b480      	push	{r7}
 800040c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800040e:	bf00      	nop
 8000410:	e7fd      	b.n	800040e <MemManage_Handler+0x4>

08000412 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000412:	b480      	push	{r7}
 8000414:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000416:	bf00      	nop
 8000418:	e7fd      	b.n	8000416 <BusFault_Handler+0x4>

0800041a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800041a:	b480      	push	{r7}
 800041c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800041e:	bf00      	nop
 8000420:	e7fd      	b.n	800041e <UsageFault_Handler+0x4>

08000422 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000422:	b480      	push	{r7}
 8000424:	af00      	add	r7, sp, #0
}
 8000426:	bf00      	nop
 8000428:	46bd      	mov	sp, r7
 800042a:	bc80      	pop	{r7}
 800042c:	4770      	bx	lr

0800042e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800042e:	b480      	push	{r7}
 8000430:	af00      	add	r7, sp, #0
}
 8000432:	bf00      	nop
 8000434:	46bd      	mov	sp, r7
 8000436:	bc80      	pop	{r7}
 8000438:	4770      	bx	lr

0800043a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800043a:	b480      	push	{r7}
 800043c:	af00      	add	r7, sp, #0
}
 800043e:	bf00      	nop
 8000440:	46bd      	mov	sp, r7
 8000442:	bc80      	pop	{r7}
 8000444:	4770      	bx	lr

08000446 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0
}
 800044a:	bf00      	nop
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr
	...

08000454 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000454:	480d      	ldr	r0, [pc, #52]	@ (800048c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000456:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000458:	f7ff fe8a 	bl	8000170 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800045c:	480c      	ldr	r0, [pc, #48]	@ (8000490 <LoopForever+0x6>)
  ldr r1, =_edata
 800045e:	490d      	ldr	r1, [pc, #52]	@ (8000494 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000460:	4a0d      	ldr	r2, [pc, #52]	@ (8000498 <LoopForever+0xe>)
  movs r3, #0
 8000462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000464:	e002      	b.n	800046c <LoopCopyDataInit>

08000466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800046a:	3304      	adds	r3, #4

0800046c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800046c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800046e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000470:	d3f9      	bcc.n	8000466 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000472:	4a0a      	ldr	r2, [pc, #40]	@ (800049c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000474:	4c0a      	ldr	r4, [pc, #40]	@ (80004a0 <LoopForever+0x16>)
  movs r3, #0
 8000476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000478:	e001      	b.n	800047e <LoopFillZerobss>

0800047a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800047a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800047c:	3204      	adds	r2, #4

0800047e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800047e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000480:	d3fb      	bcc.n	800047a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000482:	f000 f811 	bl	80004a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000486:	f7ff ff9b 	bl	80003c0 <main>

0800048a <LoopForever>:

LoopForever:
  b LoopForever
 800048a:	e7fe      	b.n	800048a <LoopForever>
  ldr   r0, =_estack
 800048c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000494:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000498:	08000510 	.word	0x08000510
  ldr r2, =_sbss
 800049c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004a0:	2000001c 	.word	0x2000001c

080004a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004a4:	e7fe      	b.n	80004a4 <ADC1_2_IRQHandler>
	...

080004a8 <__libc_init_array>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2600      	movs	r6, #0
 80004ac:	4d0c      	ldr	r5, [pc, #48]	@ (80004e0 <__libc_init_array+0x38>)
 80004ae:	4c0d      	ldr	r4, [pc, #52]	@ (80004e4 <__libc_init_array+0x3c>)
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	10a4      	asrs	r4, r4, #2
 80004b4:	42a6      	cmp	r6, r4
 80004b6:	d109      	bne.n	80004cc <__libc_init_array+0x24>
 80004b8:	f000 f81a 	bl	80004f0 <_init>
 80004bc:	2600      	movs	r6, #0
 80004be:	4d0a      	ldr	r5, [pc, #40]	@ (80004e8 <__libc_init_array+0x40>)
 80004c0:	4c0a      	ldr	r4, [pc, #40]	@ (80004ec <__libc_init_array+0x44>)
 80004c2:	1b64      	subs	r4, r4, r5
 80004c4:	10a4      	asrs	r4, r4, #2
 80004c6:	42a6      	cmp	r6, r4
 80004c8:	d105      	bne.n	80004d6 <__libc_init_array+0x2e>
 80004ca:	bd70      	pop	{r4, r5, r6, pc}
 80004cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80004d0:	4798      	blx	r3
 80004d2:	3601      	adds	r6, #1
 80004d4:	e7ee      	b.n	80004b4 <__libc_init_array+0xc>
 80004d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80004da:	4798      	blx	r3
 80004dc:	3601      	adds	r6, #1
 80004de:	e7f2      	b.n	80004c6 <__libc_init_array+0x1e>
 80004e0:	08000508 	.word	0x08000508
 80004e4:	08000508 	.word	0x08000508
 80004e8:	08000508 	.word	0x08000508
 80004ec:	0800050c 	.word	0x0800050c

080004f0 <_init>:
 80004f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004f2:	bf00      	nop
 80004f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004f6:	bc08      	pop	{r3}
 80004f8:	469e      	mov	lr, r3
 80004fa:	4770      	bx	lr

080004fc <_fini>:
 80004fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004fe:	bf00      	nop
 8000500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000502:	bc08      	pop	{r3}
 8000504:	469e      	mov	lr, r3
 8000506:	4770      	bx	lr
